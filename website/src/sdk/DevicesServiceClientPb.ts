/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: devices.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as devices_pb from './devices_pb.d';


export class DevicesClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddDevice = new grpcWeb.MethodDescriptor(
    '/proto.Devices/AddDevice',
    grpcWeb.MethodType.UNARY,
    devices_pb.AddDeviceReq,
    devices_pb.Device,
    (request: devices_pb.AddDeviceReq) => {
      return request.serializeBinary();
    },
    devices_pb.Device.deserializeBinary
  );

  addDevice(
    request: devices_pb.AddDeviceReq,
    metadata: grpcWeb.Metadata | null): Promise<devices_pb.Device>;

  addDevice(
    request: devices_pb.AddDeviceReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: devices_pb.Device) => void): grpcWeb.ClientReadableStream<devices_pb.Device>;

  addDevice(
    request: devices_pb.AddDeviceReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: devices_pb.Device) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.Devices/AddDevice',
        request,
        metadata || {},
        this.methodDescriptorAddDevice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.Devices/AddDevice',
    request,
    metadata || {},
    this.methodDescriptorAddDevice);
  }

  methodDescriptorListSpecificDeviceForUser = new grpcWeb.MethodDescriptor(
    '/proto.Devices/ListSpecificDeviceForUser',
    grpcWeb.MethodType.UNARY,
    devices_pb.ListDevicesReq,
    devices_pb.ListDevicesRes,
    (request: devices_pb.ListDevicesReq) => {
      return request.serializeBinary();
    },
    devices_pb.ListDevicesRes.deserializeBinary
  );

  listSpecificDeviceForUser(
    request: devices_pb.ListDevicesReq,
    metadata: grpcWeb.Metadata | null): Promise<devices_pb.ListDevicesRes>;

  listSpecificDeviceForUser(
    request: devices_pb.ListDevicesReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: devices_pb.ListDevicesRes) => void): grpcWeb.ClientReadableStream<devices_pb.ListDevicesRes>;

  listSpecificDeviceForUser(
    request: devices_pb.ListDevicesReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: devices_pb.ListDevicesRes) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.Devices/ListSpecificDeviceForUser',
        request,
        metadata || {},
        this.methodDescriptorListSpecificDeviceForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.Devices/ListSpecificDeviceForUser',
    request,
    metadata || {},
    this.methodDescriptorListSpecificDeviceForUser);
  }

  methodDescriptorDeleteDevice = new grpcWeb.MethodDescriptor(
    '/proto.Devices/DeleteDevice',
    grpcWeb.MethodType.UNARY,
    devices_pb.DeleteDeviceReq,
    google_protobuf_empty_pb.Empty,
    (request: devices_pb.DeleteDeviceReq) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteDevice(
    request: devices_pb.DeleteDeviceReq,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteDevice(
    request: devices_pb.DeleteDeviceReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteDevice(
    request: devices_pb.DeleteDeviceReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.Devices/DeleteDevice',
        request,
        metadata || {},
        this.methodDescriptorDeleteDevice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.Devices/DeleteDevice',
    request,
    metadata || {},
    this.methodDescriptorDeleteDevice);
  }

  methodDescriptorListAllDevices = new grpcWeb.MethodDescriptor(
    '/proto.Devices/ListAllDevices',
    grpcWeb.MethodType.UNARY,
    devices_pb.ListAllDevicesReq,
    devices_pb.ListAllDevicesRes,
    (request: devices_pb.ListAllDevicesReq) => {
      return request.serializeBinary();
    },
    devices_pb.ListAllDevicesRes.deserializeBinary
  );

  listAllDevices(
    request: devices_pb.ListAllDevicesReq,
    metadata: grpcWeb.Metadata | null): Promise<devices_pb.ListAllDevicesRes>;

  listAllDevices(
    request: devices_pb.ListAllDevicesReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: devices_pb.ListAllDevicesRes) => void): grpcWeb.ClientReadableStream<devices_pb.ListAllDevicesRes>;

  listAllDevices(
    request: devices_pb.ListAllDevicesReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: devices_pb.ListAllDevicesRes) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.Devices/ListAllDevices',
        request,
        metadata || {},
        this.methodDescriptorListAllDevices,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.Devices/ListAllDevices',
    request,
    metadata || {},
    this.methodDescriptorListAllDevices);
  }

}

